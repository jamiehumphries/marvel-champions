:root {
  --table-padding: 1rem;

  --cell-width: 5rem;
  --cell-height: 4rem;
  --scenario-cell-height: calc(var(--cell-height) * 0.65);
  --difficulty-cell-height: calc(
    var(--cell-height) - var(--scenario-cell-height)
  );

  --break-size: calc(var(--cell-width) / 10);

  --border-width: 1px;
  --border-color: black;
  --border--solid: var(--border-width) solid var(--border-color);
  --border--dashed: var(--border-width) dashed var(--border-color);
}

body {
  margin: 0;
  padding: 0;
}

/* Table settings */

table {
  border-collapse: collapse;
}

/* Standard cells */

th,
td {
  padding: 0;
  font-weight: normal;
}

th > div,
td > div {
  display: flex;
  justify-content: center;
  align-items: center;

  box-sizing: border-box;
  border-right: var(--border--solid);
  border-bottom: var(--border--solid);

  background-color: #f2f2f2;

  width: var(--cell-width);
  height: var(--cell-height);
}

th > div {
  padding: calc(var(--cell-height) / 10) calc(var(--cell-width) / 10);
}

td > input[type="checkbox"] {
  position: absolute;
  z-index: -1;
}

td > div > label {
  display: flex;
  justify-content: center;
  align-items: center;

  cursor: pointer;

  width: 100%;
  height: 100%;

  font-size: calc(var(--cell-height) * 0.4);
}

td > input[type="checkbox"]:checked ~ div {
  background-color: #c6e0b4;
}

td > input[type="checkbox"]:checked ~ div > label::after {
  content: "✓";
}

td > input[type="checkbox"]:not(:checked):not(:indeterminate) ~ div {
  background-color: #ffcccc;
}

td
  > input[type="checkbox"]:not(:checked):not(:indeterminate)
  ~ div
  > label::after {
  content: "✗";
}

/* Top left cells (Progress) */

thead > tr > th:first-child,
thead > tr:nth-child(2) > th:nth-child(2) {
  z-index: 1;
}

thead > tr:first-child > th:first-child > div {
  flex-direction: column;
  padding-bottom: 0;
}

thead > tr:first-child > th:first-child > div div:first-child {
  font-size: 1.2rem;
}

thead > tr:first-child > th:first-child > div div:nth-child(2),
thead > tr:nth-child(2) > th:first-child > div,
thead > tr:nth-child(2) > th:nth-child(2) > div {
  font-size: 0.75rem;
}

/* First row cells (Progress + Scenario) */

thead > tr:first-child > th {
  position: sticky;
  top: 0;
  background-color: white;
  padding-top: var(--table-padding);
}

thead > tr:first-child > th > div {
  border-top: var(--border--solid);
  border-bottom: none;

  width: calc(var(--cell-width) * 2);
  height: var(--scenario-cell-height);
}

/* Second row cells (Progress + Difficulty) */

thead > tr:nth-child(2) > th {
  position: sticky;
  top: calc(var(--table-padding) + var(--scenario-cell-height));
  background-color: white;
}

thead > tr:nth-child(2) > th:nth-child(2) {
  position: sticky;
  left: calc(var(--table-padding) + var(--cell-width));
  background-color: white;
}

thead > tr:nth-child(2) > th > div {
  height: var(--difficulty-cell-height);
  font-size: 0.7rem;
}

thead > tr:nth-child(2) > th:nth-child(odd) > div {
  border-right: none;
}

/* First column cells (Progress + Hero) */

tr > th:first-child {
  position: sticky;
  left: 0;
  background-color: white;
  padding-left: var(--table-padding);
}

tr > th:first-child > div {
  border-left: var(--border--solid);
}

tbody > tr > th:first-child > div {
  width: calc(var(--cell-width) * 2);
}

/* Last row cells */

tbody > tr:last-child > th,
tbody > tr:last-child > td {
  padding-bottom: var(--table-padding);
}

/* Last column cells */

thead > tr > th:last-child,
tbody > tr > td:last-child {
  padding-right: var(--table-padding);
}

/* Body cells */

tbody > tr > td:nth-child(even) > div {
  border-right: var(--border--dashed);
}

/* Row and column breaks */

tr.row-break > th,
tr.row-break > td {
  padding-top: var(--break-size);
}

tr.row-break > th > div,
tr.row-break > td > div {
  border-top: var(--border--solid);
}

th.col-break,
td.col-break {
  padding-left: var(--break-size);
}

th.col-break > div,
td.col-break > div {
  border-left: var(--border--solid);
}
